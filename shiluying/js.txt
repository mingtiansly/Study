单行注释以 // 
多行注释以 /* 开始，以 */ 结尾

使用 window.alert() 弹出警告框。
使用 document.write() 方法将内容写到 HTML 文档中  示例（document.getElementById("").innerHTML = "段落已修改。";    document.write(Date());也可以这样写Date是可以显示现在的时间。）
document.write() 仅仅向文档输出写内容，如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。
使用 innerHTML 写入到 HTML 元素 
使用 console.log() 写入到浏览器的控制台
数字（Number） 字符串（String） 布尔(Boolean)  对空（Null） 未定义（Undefined）  数组（Array []）对象（Object{}）函数（Function(){} ）
break	用于跳出循环。
continue	跳过循环中的一个迭代,只是跳出当前一次的循环
do ... while	执行一个语句块，在条件语句为 true 时继续执行该语句块。（）
for	在条件语句为 true 时，可以将代码块执行指定的次数。
for ... in	用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。
function	定义一个函数
if ... else	用于基于不同的条件来执行不同的动作。
return	退出函数，函数会停止执行，并返回指定的值。
switch	用于基于不同的条件来执行不同的动作。
throw	抛出（生成）错误 。
try	实现错误处理，与 catch 一同使用。
var	声明一个变量。
while	当条件语句为 true 时，执行语句块。
定义变量时如果是字符串要用 ''或""包围  如果是数字则不需要
var x = 2  var 关键词来声明变量  =  是对变量进行赋值

局部变量

在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。
只要函数运行完毕，本地变量就会被删除。只能在函数内部访问
    // 此处不能调用 carName 变量
function myFunction() {
    var carName = "Volvo";
    // 函数内可调用 carName 变量
}



全局 JavaScript 变量
在函数外声明的变量是全局变量，全局变量有全局作用域， 网页中所有脚本和函数均可使用。 

JavaScript 变量的生存期
JavaScript 变量的生命期从它们被声明的时间开始。
局部变量会在函数运行以后被删除。
全局变量会在页面关闭后被删除。



运算符
=== 为绝对相等，即数据类型与值都必须相等
==  为相等，即数据值相等就行
!=	 不等于
!==	 不绝对等于（值和类型有一个不相等，或两个都不相等）
&&	and并且的意思 必须都符合
||	or 或者 符合一个就可以
！  not 非的意思
+ 加法 - 减法 * 乘法  / 除法 % 取余  ++自增 （++y 先执行加法  y++先执行y再执行++  ）与   --自减 （与++y  y++ 一样） +=（x+=y  等同于 x=x+y） -= （x-=y 等同于 x=x-y）乘除取余与之一样
+ 运算符用于把文本值或字符串变量加起来（连接起来）如果把数字与字符串相加，结果将成为字符串


string
字符串的索引从 0 开始，这意味着第一个字符索引值为 [0],第二个为 [1], 以此类推。下标
可以使用内置属性 length 来计算字符串的长度  （x.length） constructor返回创建字符串属性的函数  prototype	允许您向对象添加属性和方法
字符串使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置
如果没找到对应的字符函数返回-1
lastIndexOf() 方法在字符串末尾开始查找字符串出现的位置

replace() 方法在字符串中用某些字符替换另一些字符
替换 "Microsoft" 为 "Runoob" 
str="Please visit Microsoft!"
var n=str.replace("Microsoft","Runoob");

字符串大小写转换使用函数 toUpperCase() / toLowerCase():
var txt="Hello World!";       // String
var txt1=txt.toUpperCase();   // txt1 文本会转换为大写
var txt2=txt.toLowerCase();   // txt2 文本会转换为小写


function（必须小写）
函数就是包裹在花括号中的代码块，前面使用了关键词 function
function functionname(var1,var2)
{
    // 执行代码
}

Boolean
布尔（逻辑）只能有两个值：true 或 false


array
数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。



事件
onchange	HTML 元素改变
onclick	用户点击 HTML 元素
onmouseover	用户在一个HTML元素上移动鼠标
onmouseout	用户从一个HTML元素上移开鼠标
onkeydown	用户按下键盘按键
onload	浏览器已完成页面的加载
onfocus 当输入字段获得焦点时，改变其背景色


if 语句

if (condition)
{
    当条件为 true 时执行的代码
}



if   else  语句

if (condition)
{
    当条件为 true 时执行的代码
}
else
{
    当条件不为 true 时执行的代码
}

 for 循环（循环代码块一定的次数）顺序为：语句1——语句2——代码块——语句3
 
 for (语句 1; 语句 2; 语句 3)
{
    被执行的代码块
}

For/In 循环
JavaScript for/in 语句循环遍历对象的属性：（数组尽量使用for）
for (变量 in 对象)
{
    在此执行代码
}

while 循环会在指定条件为真时循环执行代码块
while (条件)
{
    需要执行的代码
}

do/while 循环（该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行）do
{
    需要执行的代码
}
while (条件);

type of操作符来检测变量的数据类型
typeof "John"                // 返回 string 
typeof 3.14                  // 返回 number
typeof false                 // 返回 boolean
typeof [1,2,3,4]             // 返回 object
typeof {name:'John', age:34} // 返回 object
typeof NaN                    // 返回 number

null 与undefined的区别
typeof undefined             // undefined
typeof null                  // object
null === undefined           // false
null == undefined            // true

正则表达式

/runoob/i  是一个正则表达式。
runoob  是一个正则表达式主体 (用于检索)。
i  是一个修饰符 (搜索不区分大小写)
search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置
replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串


函数提升
变量提升  （函数及变量的声明都将被提升到函数的最顶部）
自调用
(function () {
    var x = "Hello!!";      // 我将调用自己
})();

javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值  <a href="javascript:void(0)">单击此处什么也不会发生</a>
void()仅仅是代表不返回任何值，但是括号内的表达式还是要运行 void(alert("Wornning!"))。


  闭包
闭包就是一个函数引用另一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会增加内存消耗。或者说闭包就是子函数可以使用父函数的局部变量，还有父函数的参数

this
在方法中，this 表示该方法所属的对象。
如果单独使用，this 表示全局对象。
在函数中，this 表示全局对象。
在函数中，在严格模式下，this 是未定义的(undefined)。
在事件中，this 表示接收事件的元素

let 声明的变量只在 let 命令所在的代码块内有效。
使用 var 关键字声明的全局作用域变量属于 window 对象
使用 let 关键字声明的全局作用域变量不属于 window 对象
let 关键字定义的变量不可以在使用后声明，也就是变量需要先声明再使用。

const 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的
const 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用。

element.addEventListener(event, function, useCapture);
第一个参数是事件的类型 (如 "click" 或 "mousedown").
第二个参数是事件触发后调用的函数。
第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的,默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递

removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:
document.getElementById("myDIV").addEventListener("mousemove", myFunction);
function myFunction() {
    document.getElementById("demo").innerHTML = Math.random();
}
function removeHandler() {
    document.getElementById("myDIV").removeEventListener("mousemove", myFunction);
}

window.innerHeight - 浏览器窗口的内部高度(包括滚动条)document.body.clientHeight
window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)document.body.clientWidth
window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() - 移动当前窗口
window.resizeTo() - 调整当前窗口的尺寸

screen.availWidth - 可用的屏幕宽度
screen.availHeight - 可用的屏幕高度